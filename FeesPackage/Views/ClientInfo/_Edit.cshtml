@using FeesPackage.Models;
@using Newtonsoft.Json;
@model ClientInfoModel

@using (Html.BeginForm("Save", "ClientInfo", FormMethod.Post, Model.Client))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Client.id)

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Client_Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Client.Client_Name, new { rows = 2, htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Client.Client_Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Employer_Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Client.Employer_Name, new { rows = 2, htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Client.Employer_Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Escrow, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Client.Escrow, new { htmlAttributes = new { @class = "form-control", @style = "width:30px" } })
            @Html.ValidationMessageFor(model => model.Client.Escrow, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Handling_Atty, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Client.Handling_Atty, new SelectList(Model.Attys, "Id", "Name"))
            @Html.ValidationMessageFor(model => model.Client.Handling_Atty, "", new { @class = "text-danger" })
            @Html.EditorFor(model => model.Client.Handling, new { htmlAttributes = new { @class = "form-control", @style = "width:30px" } })
            @Html.ValidationMessageFor(model => model.Client.Handling, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Credit_Atty, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Client.Credit_Atty, new SelectList(Model.Attys, "Id", "Name"))
            @Html.ValidationMessageFor(model => model.Client.Credit_Atty, "", new { @class = "text-danger" })
            @Html.EditorFor(model => model.Client.Credit, new { htmlAttributes = new { @class = "form-control", @style = "width:30px" } })
            @Html.ValidationMessageFor(model => model.Client.Credit, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.County, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Client.County, new SelectList(Model.Counties, "Id", "Name"))
            @Html.ValidationMessageFor(model => model.Client.County, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client.Accident_Desc, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Client.Accident_Desc, new { rows = 2, htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Client.Accident_Desc, "", new { @class = "text-danger" })
        </div>
    </div>

    <br />
    <div class="form-group">
        Claims: (@Model.Claims.Count())
        <button id="addclaimrowbutton" type="button" style="float: right">+</button>
        <div class="col-md-10">
            <div id='jqxWidget' style="font-size: 13px; font-family: Verdana; width: 100%; height: 100%;">
                <div id="claims"></div>
            </div>
        </div>
    </div>

    <br />
    <div class="form-group">
        Payments: (@Model.Payments.Count()) Totaling: @string.Format("{0:C}", @Model.Payments.Sum(item => item.Amount))
        <div class="col-md-10">
            <div id='jqxWidget' style="font-size: 13px; font-family: Verdana; width: 100%; height: 100%;">
                <div id="payments"></div>
            </div>
        </div>
    </div>

    <br />
    <div class="form-group" style="float:left">
        <div class="col-md-offset-2 col-md-10">
            <input id="referralSrcBtn" type="button" value="+ Referral Source" class="btn" />
        </div>
    </div>

    <div class="form-group" style="float:left;margin-left:5px;">
        <div class="col-md-offset-2 col-md-10">
            <input id="insuranceContactBtn" type="button" value="+ Insurance Contact" class="btn" />
        </div>
    </div>

    <div class="form-group" style="float:right">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div id="referralSrcDlg" style="display:none">
</div>

<div id="insuranceContactDlg" style="display:none">
</div>

<style>
    .jqx-grid-cell {
        text-align: center;
        vertical-align: middle;
    }

    #Client_Client_Name,
    #Client_Employer_Name,
    #Client_Accident_Desc {
        width: 80%;
    }

    .ui-dialog-titlebar {
        background-color: lightblue;
    }

    .control-label.col-md-2 {
        margin-right: 5px;
        width: 110px;
    }

    .ui-dialog {
        background-color: #e0e9f5;
        -webkit-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.5);
        -moz-box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.5);
        box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.5);
    }

    input.btn {
        background-color: blue;
        border: none;
        color: white;
        padding: 7px 16px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 12px;
        -webkit-transition-duration: 0.4s;
        transition-duration: 0.4s;
        -webkit-box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        -moz-box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
    }

        input.btn:hover {
            background-color: darkblue;
            color: white;
            -webkit-box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
            -moz-box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
            box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
        }
</style>

<script>
    // open InsuranceContact dialog
    $('#insuranceContactBtn').click(function() {
        $.get('/MasterTables/InsuranceContact', {}, function (data, status, jqXHR) {
            // load dialog content
            $('#insuranceContactDlg').html(data);
            // intialize referral grid by calling it's ready() function
            ready();
            // open dialog
            $("#insuranceContactDlg").dialog("open");
        }).fail(function (jqXHR, textStatus, errorThrown) {
            alert(textStatus + ': ' + errorThrown);
        });
    });

    // setup edit dialog
    $("#insuranceContactDlg").dialog({
        autoOpen: false,
        width: 920,
        position: 'center top',
        resizable: false,
        modal: true,
        title: 'Insurance Contact',
        show: {
            effect: "blind",
            duration: 500
        },
        hide: {
            effect: "explode",
            duration: 500
        }
    });

    // on close, reload page to refresh
    $("#insuranceContactDlg").on( "dialogclose", function(event, ui) {
        $.post('/ClientInfo/Edit', { id: id }, function (data, status, jqXHR) {
            $('#ClientDlg').html(data);
            $('.ui-dialog-title').html('@ViewBag.Title [' + id + ']');
            $("#ClientDlg").dialog("open");
        }).fail(function (jqXHR, textStatus, errorThrown) {
            alert(textStatus + ': ' + errorThrown);
        });
    });
</script>

<script>
    // open ReferralSrc dialog
    $('#referralSrcBtn').click(function() {
        $.get('/MasterTables/ReferralSrc', {}, function (data, status, jqXHR) {
            // load dialog content
            $('#referralSrcDlg').html(data);
            // intialize referral grid by calling it's ready() function
            ready();
            // open dialog
            $("#referralSrcDlg").dialog("open");
        }).fail(function (jqXHR, textStatus, errorThrown) {
            alert(textStatus + ': ' + errorThrown);
        });
    });

    // setup edit dialog
    $("#referralSrcDlg").dialog({
        autoOpen: false,
        width: 920,
        position: 'center top',
        resizable: false,
        modal: true,
        title: 'Referral Source',
        show: {
            effect: "blind",
            duration: 500
        },
        hide: {
            effect: "explode",
            duration: 500
        }
    });

    // on close, reload page to refresh
    $("#referralSrcDlg").on( "dialogclose", function(event, ui) {
        $.post('/ClientInfo/Edit', { id: id }, function (data, status, jqXHR) {
            $('#ClientDlg').html(data);
            $('.ui-dialog-title').html('@ViewBag.Title [' + id + ']');
            $("#ClientDlg").dialog("open");
        }).fail(function (jqXHR, textStatus, errorThrown) {
            alert(textStatus + ': ' + errorThrown);
        });
    });
</script>

<script>
    var inUpdate = false;

    // create new row.
    $("#addclaimrowbutton").on('click', function () {
        // add empty row in first position
        $("#claims").jqxGrid('addrow', null, {}, 'first');
        // begin editting newly added row, first column
        $("#claims").jqxGrid('begincelledit', 0, 'Claim_Number');

        return false;
    });

    // prepare the Attorney list dropdown data
    var locallista = @Html.Raw(JsonConvert.SerializeObject(Model.AttyCombos));

    var locallistaSource = {
        datatype: "array",
        datafields: [
                { name: 'Name', type: 'string' },
                { name: 'Id', type: 'string' }
        ],
        localdata: locallista
    };
    var locallistaAdapter = new $.jqx.dataAdapter(locallistaSource);

    // prepare the Adjusters list dropdown data
    var locallistb = @Html.Raw(JsonConvert.SerializeObject(Model.Adjusters));

    var locallistbSource = {
        datatype: "array",
        datafields: [
                { name: 'Name', type: 'string' },
                { name: 'Id', type: 'string' }
        ],
        localdata: locallistb
    };
    var locallistbAdapter = new $.jqx.dataAdapter(locallistbSource);

    // prepare the Frequencys list dropdown data
    var locallistc = @Html.Raw(JsonConvert.SerializeObject(Model.Frequencys));

    var locallistcSource = {
        datatype: "array",
        datafields: [
                { name: 'Name', type: 'string' },
                { name: 'Id', type: 'string' }
        ],
        localdata: locallistc
    };
    var locallistcAdapter = new $.jqx.dataAdapter(locallistcSource);

    // prepare the StatusCodes list dropdown data
    var locallistd = @Html.Raw(JsonConvert.SerializeObject(Model.StatusCodes));

    var locallistdSource = {
        datatype: "array",
        datafields: [
                { name: 'Name', type: 'string' },
                { name: 'Id', type: 'string' }
        ],
        localdata: locallistd
    };
    var locallistdAdapter = new $.jqx.dataAdapter(locallistdSource);

    // prepare the data
    var data = @Html.Raw(JsonConvert.SerializeObject(Model.Claims));

    var source =
    {
        dataType: "json",
        updaterow: function (rowid, rowdata, commit) {
            if (!inUpdate) {
                $.post('/ClientInfo/SaveClaim', { data: rowdata, ref_no: id }, function (data, status, jqXHR) {
                    if ($("#claims").jqxGrid('getcellvaluebyid', rowid, 'Reference_Number') != jqXHR.statusText) {
                        inUpdate = true;
                        $("#claims").jqxGrid('setcellvaluebyid', rowid, 'Reference_Number', jqXHR.statusText);
                        inUpdate = false;
                    }
                    commit(true);
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    alert(textStatus + ': ' + errorThrown);
                });
            }
        },
        dataFields: [
            { name: 'Reference_Number', type: 'string' },
            { name: 'Claim_Number', type: 'string' },
            { name: 'Insurance_Contact', type: 'string' },
            { name: 'Attorney_Breakdown', type: 'int' },
            { name: 'Payment_Amount', type: 'float' },
            { name: 'Payment_Frequency', type: 'string' },
            { name: 'Status_Code', type: 'string' }
        ],
        id: 'claim',
        localdata: data
    };

    var dataAdapter = new $.jqx.dataAdapter(source, {
        downloadComplete: function (data, status, xhr) { },
        loadComplete: function (data) { },
        beforeLoadComplete: function (records) { },
        loadError: function (xhr, status, error) { alert('loadError: status=' + status + ' error=' + error); },
    });

    $("#claims").jqxGrid(
    {
        theme: 'energyblue',
        width: '100%',
        height: '100px',
        autowidth: false,
        source: dataAdapter,
        showfilterrow: false,
        filterable: false,
        pageable: false,
        pagesize: 20,
        groupable: false,
        editable: true,
        sortable: false,
        ready: function () { _setup(); },
        columnsresize: true,
        columns: [
            { text: 'Reference Number', datafield: 'Reference_Number', hidden: true },
            { text: 'Claim Number', datafield: 'Claim_Number', filtertype: 'checkedlist', width: '104px', align: 'center' },
            { text: 'Insurance Contact', datafield: 'Insurance_Contact', filtertype: 'checkedlist', align: 'center',
                    columntype: 'dropdownlist',
                    createeditor: function (row, column, editor)
                    {
                        editor.jqxDropDownList({
                            dropDownHeight: 200,
                            source: locallistbAdapter,
                            displayMember: 'Id',
                            valueMember: 'Name',
                            filterable: false,
                            placeHolder: 'Choose ...',
                            renderer: function (index, label, value)
                            {
                                var item = editor.jqxDropDownList('getSelectedItem');
                                return label + ' - ' + value;
                            }
                        });
                        editor.on('close', function (event) {
                            //var sel = $('#claims').jqxGrid('getselectedrowindex');
                            // this will lose focus on current dropdownlist, firing onChange event on this row
                            //setTimeout(function () { $("#claims").jqxGrid('begincelledit', sel, 'Reference_Number'); }, 10);
                        });
                    }
            },
            { text: 'Atty Combo', datafield: 'Attorney_Breakdown', filtertype: 'checkedlist', width: '89px', align: 'center',
                    columntype: 'dropdownlist',
                    createeditor: function (row, column, editor)
                    {
                        editor.jqxDropDownList({
                            dropDownHeight: 200,
                            source: locallistaAdapter,
                            displayMember: 'Id',
                            valueMember: 'Name',
                            filterable: false,
                            placeHolder: 'Choose ...',
                            renderer: function (index, label, value)
                            {
                                var item = editor.jqxDropDownList('getSelectedItem');
                                return label + ' - ' + value;
                            }
                        });
                        editor.on('close', function (event) {
                            //var sel = $('#claims').jqxGrid('getselectedrowindex');
                            // this will lose focus on current dropdownlist, firing onChange event on this row
                            //setTimeout(function () { $("#claims").jqxGrid('begincelledit', sel, 'Reference_Number'); }, 10);
                        });
                    }
            },
            { text: 'Amount', datafield: 'Payment_Amount', filtertype: 'checkedlist', width: '63px', cellsalign: 'right', cellsformat: 'c', align: 'center' },
            { text: 'Frequency', datafield: 'Payment_Frequency', filtertype: 'checkedlist', width: '80px', cellsalign: 'center', align: 'center',
                    columntype: 'dropdownlist',
                    createeditor: function (row, column, editor)
                    {
                        editor.jqxDropDownList({
                            dropDownHeight: 200,
                            source: locallistcAdapter,
                            displayMember: 'Id',
                            valueMember: 'Name',
                            filterable: false,
                            placeHolder: 'Choose ...',
                            renderer: function (index, label, value)
                            {
                                var item = editor.jqxDropDownList('getSelectedItem');
                                return value;
                            }
                        });
                        editor.on('close', function (event) {
                            //var sel = $('#claims').jqxGrid('getselectedrowindex');
                            // this will lose focus on current dropdownlist, firing onChange event on this row
                            //setTimeout(function () { $("#claims").jqxGrid('begincelledit', sel, 'Reference_Number'); }, 10);
                        });
                    }
            },
            { text: 'Status', datafield: 'Status_Code', filtertype: 'checkedlist', width: '54px', cellsalign: 'center', align: 'center',
                    columntype: 'dropdownlist',
                    createeditor: function (row, column, editor)
                    {
                        editor.jqxDropDownList({
                            dropDownHeight: 200,
                            source: locallistdAdapter,
                            displayMember: 'Id',
                            valueMember: 'Name',
                            filterable: false,
                            placeHolder: 'Choose ...',
                            renderer: function (index, label, value)
                            {
                                var item = editor.jqxDropDownList('getSelectedItem');
                                return value;
                            }
                        });
                        editor.on('close', function (event) {
                            //var sel = $('#claims').jqxGrid('getselectedrowindex');
                            // this will lose focus on current dropdownlist, firing onChange event on this row
                            //setTimeout(function () { $("#claims").jqxGrid('begincelledit', sel, 'Reference_Number'); }, 10);
                        });
                    }
            }
        ]
    });

    function _setup() {
        $("#claims").jqxGrid('autoresizecolumns');
    }
</script>

<script>
    // prepare the data
    var data = @Html.Raw(JsonConvert.SerializeObject(Model.Payments));

    var source =
    {
        dataType: "json",
        dataFields: [
            { name: 'Claim_Number', type: 'string', align: 'center' },
            { name: 'Payment_Date', type: 'date' },
            { name: 'Period_From', type: 'date' },
            { name: 'Period_To', type: 'date' },
            { name: 'Amount', type: 'float' },
            { name: 'Input_Date', type: 'date' },
            { name: 'Deposit_Indicator', type: 'int' },
            { name: 'Posted_Indicator', type: 'bool' }
        ],
        id: 'payment',
        localdata: data
    };

    var dataAdapter = new $.jqx.dataAdapter(source, {
        downloadComplete: function (data, status, xhr) { },
        loadComplete: function (data) { },
        beforeLoadComplete: function (records) { },
        loadError: function (xhr, status, error) { alert('loadError: status=' + status + ' error=' + error); },
    });

    $("#payments").jqxGrid(
    {
        theme: 'energyblue',
        width: '100%',
        height: '100px',
        autowidth: false,
        source: dataAdapter,
        showfilterrow: false,
        filterable: false,
        pageable: false,
        pagesize: 20,
        groupable: false,
        editable: false,
        sortable: false,
        ready: function () { _setup(); },
        columnsresize: true,
        columns: [
            { text: 'Claim Number', datafield: 'Claim_Number', filtertype: 'checkedlist' },
            { text: 'Payment Date', datafield: 'Payment_Date', filtertype: 'checkedlist', cellsalign: 'center', cellsformat: 'MM/dd/yy', align: 'center' },
            { text: 'Period From', datafield: 'Period_From', filtertype: 'checkedlist', cellsalign: 'center', cellsformat: 'MM/dd/yy', align: 'center' },
            { text: 'Period To', datafield: 'Period_To', filtertype: 'checkedlist', cellsalign: 'center', cellsformat: 'MM/dd/yy', align: 'center' },
            { text: 'Amount', datafield: 'Amount', filtertype: 'checkedlist', cellsalign: 'right', cellsformat: 'c', align: 'center' },
            { text: 'Input Date', datafield: 'Input_Date', filtertype: 'checkedlist', cellsalign: 'center', cellsformat: 'MM/dd/yy', align: 'center' },
            { text: 'Deposit', datafield: 'Deposit_Indicator', filtertype: 'checkedlist', cellsalign: 'center', align: 'center' },
            { text: 'Posted', datafield: 'Posted_Indicator', filtertype: 'checkedlist', align: 'center',
                    cellsRenderer: function (row, column, value, rowData) {
          	            var checkbox;
                        if (value === true)
            	            checkbox = '<input type="checkbox" onclick="return false;">'
                        else
            	            checkbox = '<input type="checkbox" checked onclick="return false;">'
                        return checkbox;
                    }
            }
        ]
    });

    function _setup() {
        $("#payments").jqxGrid('autoresizecolumns');
    }
</script>
